@startuml
abstract ProcessStep {
  -result: Boolean
  -isDone: Boolean  

  +execute(tank: MixingTank); Boolean
  #{abstract}<<abstract>> basicExecute(tank: MixingTank): Boolean
  -setSuccess()
  -setFailure()
  +isDone(): Boolean
  +isSuccessful(): Boolean
}
note right of ProcessStep::execute
public execute (tank: MixingTank){
  if(this.basicExecute(tank)){
    this.setSuccess();
  }
  else{
    this.setFailure();
  }
}
end note

class LightMix extends ProcessStep {
  #basicExecute(tank: MixingTank): Boolean
}

class Purge extends ProcessStep {
  #basicExecute(tank: MixingTank): Boolean
}
abstract MixingTank {
  +{abstract}<<abstract>> heatPower(percentage: Integer): Boolean
  +{abstract}<<abstract>> mixerPower(percentage: Integer): Boolean
  +{abstract}<<abstract>> purge(): Boolean
  +{abstract}<<abstract>> upTo(): Real
  +{abstract}<<abstract>> temperature(): Real
  +getMixingPower(): Real
}

class MixingTankFakeObject extends MixingTank {
  -heatPower: Integer
  -mixingPower: Integer
  -upTo: Real
  -temperature: Real

  +heatPower(percentage: int): Boolean
  +mixerPower(percentage: int): Boolean
  +purge(): Boolean
  +upTo(): Real
  -getTemperatureIncreasePerSecond(): Real
  +temperature(): Real
  +getMixingPower(): Real
}

class MixingTankSaboteurFakeObject extends MixingTank {
  +heatPower(percentage: int): Boolean
  +mixerPower(percentage: int): Boolean
  +purge(): Boolean
  +upTo(): Real
  +temperature(): doubReale
}
@enduml
